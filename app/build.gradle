buildscript {
    repositories {
        if (project.privateRepoUrl) {
            maven {
                url project.privateRepoUrl
                credentials {
                    username = projegrct.privateRepoUsername
                    password = System.env.PRIVATE_REPO_TOKEN
                }
            }
        }
        mavenLocal()
        mavenCentral()
        gradlePluginPortal()
        maven {
            url 'https://oss.sonatype.org/content/repositories/snapshots'
            mavenContent { snapshotsOnly() }
        }
        maven {
            url "https://repo.spring.io/milestone"
            mavenContent { releasesOnly() }
        }
        maven { url 'https://build.shibboleth.net/nexus/content/repositories/releases/' }
        maven { url 'https://oss.sonatype.org/content/repositories/releases' }

    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${project.springBootVersion}"
        classpath "io.freefair.gradle:maven-plugin:${project.gradleFreeFairPluginVersion}"
        classpath "io.freefair.gradle:lombok-plugin:${project.gradleFreeFairPluginVersion}"
        classpath "io.spring.gradle:dependency-management-plugin:${project.gradleDependencyManagementPluginVersion}"

        classpath "de.undercouch:gradle-download-task:${project.gradleDownloadTaskVersion}"
        classpath "org.apereo.cas:cas-server-core-api-configuration-model:${project.'cas.version'}"
        classpath "org.apereo.cas:cas-server-support-configuration-metadata-repository:${project.'cas.version'}"
    }
}

plugins {
    id "org.sonarqube" version "3.1.1"
    id 'jacoco'
}

repositories {
    if (project.privateRepoUrl) {
        maven {
            url project.privateRepoUrl
            credentials {
                username = project.privateRepoUsername
                password = System.env.PRIVATE_REPO_TOKEN
            }
        }
    }
    mavenLocal()
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/releases' }
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots'
        mavenContent { snapshotsOnly() }
    }
    maven { url 'https://build.shibboleth.net/nexus/content/repositories/releases/' }
    maven {
        url "https://repo.spring.io/milestone"
        mavenContent { releasesOnly() }
    }
}

apply plugin: "io.freefair.war-overlay"
apply plugin: "war"
apply plugin: "org.springframework.boot"
apply plugin: "io.freefair.lombok"
apply plugin: "idea"
apply plugin: "io.spring.dependency-management"

apply from: rootProject.file("gradle/springboot.gradle")
apply from: rootProject.file("gradle/tasks.gradle")


configurations.configureEach {
    resolutionStrategy {
        cacheChangingModulesFor 0, "seconds"
        cacheDynamicVersionsFor 0, "seconds"
        preferProjectModules()
        def failIfConflict = project.hasProperty("failOnVersionConflict") && Boolean.valueOf(project.getProperty("failOnVersionConflict"))
        if (failIfConflict) {
            failOnVersionConflict()
        }
    }
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

war {
    entryCompression = ZipEntryCompression.STORED
    enabled = false
}

sourceSets {
    bootRunSources {
        resources {
            srcDirs new File("etc/cas/templates/"), new File("${project.getProjectDir()}/src/main/resources/")
        }
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(project.targetCompatibility as String)
    }
}

test {
    useJUnitPlatform()
}

dependencies {
    implementation enforcedPlatform("org.apereo.cas:cas-server-support-bom:${project.'cas.version'}")

    // Other CAS dependencies/modules may be listed here...
    implementation "org.apereo.cas:cas-server-core-api-protocol"
    implementation "org.apereo.cas:cas-server-core-api-configuration-model"
    implementation "org.apereo.cas:cas-server-core-authentication-api"
    implementation "org.apereo.cas:cas-server-core-authentication-attributes"
    implementation "org.apereo.cas:cas-server-core-authentication-throttle"
    implementation "org.apereo.cas:cas-server-core-logout"
    implementation "org.apereo.cas:cas-server-core-logout-api"
    implementation "org.apereo.cas:cas-server-core-notifications"
    implementation "org.apereo.cas:cas-server-core-notifications-api"
    implementation "org.apereo.cas:cas-server-core-services"
    implementation "org.apereo.cas:cas-server-core-services-api"
    implementation "org.apereo.cas:cas-server-core-services-authentication"
    implementation "org.apereo.cas:cas-server-core-services-registry"
    implementation "org.apereo.cas:cas-server-core-util"
    implementation "org.apereo.cas:cas-server-core-web"
    implementation "org.apereo.cas:cas-server-core-web-api"
    implementation "org.apereo.cas:cas-server-core-webflow"
    implementation "org.apereo.cas:cas-server-core-webflow-api"
    implementation "org.apereo.cas:cas-server-support-validation-core"
    implementation "org.apereo.cas:cas-server-core-validation-api"
    
    implementation "org.apereo.cas:cas-server-support-ldap"
    implementation "org.apereo.cas:cas-server-support-ldap-core"

    implementation "org.apereo.cas:cas-server-support-oidc"
    implementation "org.apereo.cas:cas-server-support-oidc-core"
    implementation "org.apereo.cas:cas-server-support-oidc-core-api"
    implementation "org.apereo.cas:cas-server-support-oidc-services"

    implementation "org.apereo.cas:cas-server-support-oauth-api"
    implementation "org.apereo.cas:cas-server-support-oauth-core-api"
    implementation "org.apereo.cas:cas-server-support-oauth-services"
    implementation "org.apereo.cas:cas-server-support-oauth-webflow"

    implementation "org.apereo.cas:cas-server-support-pac4j-webflow"
    implementation "org.apereo.cas:cas-server-support-pac4j-api"

    implementation "org.apereo.cas:cas-server-support-pm"
    implementation "org.apereo.cas:cas-server-support-pm-core"
    implementation "org.apereo.cas:cas-server-support-pm-ldap"
    implementation "org.apereo.cas:cas-server-support-pm-webflow"

    implementation "org.apereo.cas:cas-server-support-rest"
    implementation "org.apereo.cas:cas-server-support-swagger"
    implementation "org.apereo.cas:cas-server-support-saml"
    implementation "org.apereo.cas:cas-server-support-swagger"
    implementation "org.apereo.cas:cas-server-support-throttle"
    implementation "org.apereo.cas:cas-server-support-throttle-core"

    implementation "org.apereo.cas:cas-server-support-json-service-registry"

    implementation 'org.mousio:etcd4j:2.18.0'
    implementation 'com.googlecode.json-simple:json-simple:1.1.1'
    
    implementation 'org.apache.logging.log4j:log4j-core'
    implementation 'org.apache.logging.log4j:log4j-api'
    implementation("org.apache.logging.log4j:log4j-jakarta-web") // has to be jakarta not javax!!
    
    testImplementation platform("org.junit:junit-bom:5.10.0")
    testImplementation "org.junit.jupiter:junit-jupiter"

    testImplementation "org.mockito:mockito-core:5.2.0"
    testImplementation "org.mockito:mockito-junit-jupiter:5.2.0"
    // mockito-inline nur falls du final/static brauchst â€“ dann gleiche Version:
    testImplementation "org.mockito:mockito-inline:5.2.0"

    testImplementation "org.hamcrest:hamcrest-all:1.3"
    testImplementation "org.wiremock:wiremock-standalone:3.5.4"
    testImplementation "com.fasterxml.jackson.core:jackson-databind:2.17.0"

    developmentOnly "org.springframework.boot:spring-boot-devtools:${project.springBootVersion}"
    runtimeOnly("org.springframework.boot:spring-boot-properties-migrator")

    implementation "org.apereo.cas:cas-server-core-scripting:${project.'cas.version'}"

    implementation "org.pac4j:pac4j-cas"
    implementation "org.pac4j:pac4j-oidc"
    implementation "org.pac4j:pac4j-config"
    implementation "org.apereo.cas:cas-server-core-multitenancy"

    compileOnly("jakarta.servlet:jakarta.servlet-api:6.1.0")
    testImplementation("jakarta.servlet:jakarta.servlet-api:6.1.0")
    testRuntimeOnly("jakarta.servlet:jakarta.servlet-api:6.1.0")
    testRuntimeOnly("org.glassfish.web:jakarta.servlet.jsp.jstl:3.0.1")
    implementation "org.springframework.boot:spring-boot-starter-aop"

}

configurations.all {
  exclude group: 'org.apache.logging.log4j', module: 'log4j-web'
  exclude group: "com.sun.xml.ws", module: "jaxws-rt"
  exclude group: "org.apache.tomcat.embed"
}

