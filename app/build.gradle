buildscript {
    repositories {
        mavenLocal()
        gradlePluginPortal()
        mavenCentral()
        jcenter()
        maven {
            url "https://repo.spring.io/libs-milestone"
            mavenContent { releasesOnly() }
        }
        maven {
            url "https://repo.spring.io/libs-snapshot"
            mavenContent { snapshotsOnly() }
        }
        maven {
            url "https://plugins.gradle.org/m2/"
            mavenContent { releasesOnly() }
        }
    }
    dependencies {
        classpath "de.undercouch:gradle-download-task:${project.gradleDownloadTaskVersion}"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${project.springBootVersion}"
        classpath "gradle.plugin.com.google.cloud.tools:jib-gradle-plugin:${project.jibVersion}"
        classpath "io.freefair.gradle:maven-plugin:${project.gradleMavenPluginVersion}"
        classpath "io.freefair.gradle:lombok-plugin:${project.gradleLombokPluginVersion}"
    }
}

plugins {
    id "org.sonarqube" version "3.1.1"
    id 'jacoco'
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
        mavenContent { snapshotsOnly() }
    }
    maven {
        mavenContent { releasesOnly() }
        url "https://build.shibboleth.net/nexus/content/repositories/releases/"
    }
    maven {
        mavenContent { releasesOnly() }
        url "https://repo.spring.io/milestone/"
    }
    maven {
        url "https://repo.spring.io/snapshot/"
        mavenContent { snapshotsOnly() }
    }
    maven {
        mavenContent { snapshotsOnly() }
        url "https://oss.jfrog.org/artifactory/oss-snapshot-local"
    }
}

def casServerVersion = project.'cas.version'
def casWebApplicationBinaryName = "cas.war"

project.ext."casServerVersion" = casServerVersion
project.ext."casWebApplicationBinaryName" = casWebApplicationBinaryName

apply plugin: "io.freefair.war-overlay"
apply plugin: "io.freefair.lombok"
apply from: rootProject.file("gradle/tasks.gradle")

apply plugin: "war"
apply plugin: "eclipse"
apply plugin: "idea"

apply from: rootProject.file("gradle/springboot.gradle")
apply from: rootProject.file("gradle/dockerjib.gradle")

dependencies {
    // Other CAS dependencies/modules may be listed here...
    implementation "org.apereo.cas:cas-server-core-api-protocol:${casServerVersion}"
    implementation "org.apereo.cas:cas-server-core-api-configuration-model:${casServerVersion}"
    implementation "org.apereo.cas:cas-server-core-authentication-api:${casServerVersion}"
    implementation "org.apereo.cas:cas-server-core-authentication-throttle:${casServerVersion}"
    implementation "org.apereo.cas:cas-server-core-authentication-attributes:${casServerVersion}"
    implementation "org.apereo.cas:cas-server-core-logout:${casServerVersion}"
    implementation "org.apereo.cas:cas-server-core-logout-api:${casServerVersion}"
    implementation "org.apereo.cas:cas-server-core-services:${casServerVersion}"
    implementation "org.apereo.cas:cas-server-core-services-api:${casServerVersion}"
    implementation "org.apereo.cas:cas-server-core-util:${casServerVersion}"
    implementation "org.apereo.cas:cas-server-support-ldap:${casServerVersion}"
    implementation "org.apereo.cas:cas-server-support-ldap-core:${casServerVersion}"
    implementation "org.apereo.cas:cas-server-support-oidc:${casServerVersion}"
    implementation "org.apereo.cas:cas-server-support-oidc-core-api:${casServerVersion}"
    implementation "org.apereo.cas:cas-server-support-oidc-services:${casServerVersion}"
    implementation "org.apereo.cas:cas-server-support-oauth-api:${casServerVersion}"
    implementation "org.apereo.cas:cas-server-support-oauth-core-api:${casServerVersion}"
    implementation "org.apereo.cas:cas-server-support-oauth-services:${casServerVersion}"
    implementation "org.apereo.cas:cas-server-support-oauth-webflow:${casServerVersion}"
    implementation "org.apereo.cas:cas-server-support-rest:${casServerVersion}"
    implementation "org.apereo.cas:cas-server-support-saml:${casServerVersion}"
    implementation "org.apereo.cas:cas-server-support-swagger:${casServerVersion}"
    implementation "org.apereo.cas:cas-server-support-throttle:${casServerVersion}"
    implementation "org.apereo.cas:cas-server-support-throttle-core:${casServerVersion}"

    implementation 'org.mousio:etcd4j:2.11.0'
    implementation 'com.googlecode.json-simple:json-simple:1.1.1'
    implementation 'org.apache.logging.log4j:log4j-core:2.14.1'
    implementation 'org.webjars.bowergithub.cloudogu:ces-theme:0.2.1'
    implementation 'org.pac4j:pac4j-core:4.3.1'

    testCompile 'org.mockito:mockito-core:2.2.9'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'com.github.tomakehurst:wiremock:2.6.0'
    testCompile 'uk.org.lidalia:slf4j-test:1.2.0'
}

tasks.findByName("jibDockerBuild")
        .dependsOn(copyWebAppIntoJib, copyConfigIntoJib)
        .finalizedBy(deleteWebAppFromJib)

tasks.findByName("jib")
        .dependsOn(copyWebAppIntoJib, copyConfigIntoJib)
        .finalizedBy(deleteWebAppFromJib)

configurations.all {
    resolutionStrategy {
        cacheChangingModulesFor 0, "seconds"
        cacheDynamicVersionsFor 0, "seconds"

        preferProjectModules()

        def failIfConflict = project.hasProperty("failOnVersionConflict") && Boolean.valueOf(project.getProperty("failOnVersionConflict"))
        if (failIfConflict) {
            failOnVersionConflict()
        }
    }
}

eclipse {
    classpath {
        downloadSources = true
        downloadJavadoc = true
    }
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}