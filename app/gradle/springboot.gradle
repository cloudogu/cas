apply plugin: "org.springframework.boot"

configurations {
    bootRunConfig.extendsFrom compileClasspath

    configureEach {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            if (details.requested.group == 'org.codehaus.groovy') {
                details.useVersion '3.0.9'
            }

            // Fix CVE-2023-20861
            if (details.requested.group == 'org.springframework') {
                details.useVersion '5.3.27'
            }

            // Fix CVE-2022-22965 / CVE-2023-20873 / CVE-2022-22965 / GHSA-36p3-wjmg-h94x // CVE-2023-20873
            if (details.requested.group == 'org.springframework.boot') {
                details.useVersion '2.7.11'
            }

            // Spring Boot 2.7.x needs at least spring cloud 3.1.3
            if (details.requested.group == 'org.springframework.cloud') {
                details.useVersion '3.1.3'
            }

            // Fix CVE-2022-25857 / CVE-2022-38749 / CVE-2022-38749 / CVE-2022-38749 /  CVE-2022-38752 / CVE-2022-41854 / CVE-2022-1471
            if (details.requested.name == 'snakeyaml') {
                details.useVersion '2.0'
            }

            // Fix CVE-2022-42889
            if (details.requested.name == 'commons-text') {
                details.useVersion '1.10.0'
            }

            // Fix CVE-2019-20444 / CVE-2019-20445 / CVE-2019-16869 / CVE-2021-21290 / CVE-2021-21409 / CVE-2021-43797 // CVE-2022-24823
            if (details.requested.group == 'io.netty') {
                useVersion '4.1.92.Final'
            }

            // Fix CVE-2020-36518 / CVE-2020-36518 / CVE-2022-42004 / CVE-2022-42003 /
            if (details.requested.group == 'com.fasterxml.jackson.core') {
                useVersion '2.13.5'
            }

            // Fix CVE-2020-15250
            if (details.requested.group == 'junit') {
                useVersion '4.13.2'
            }

            // Fix CVE-2023-1370
            if (details.requested.group == 'net.minidev') {
                useVersion '2.4.9'
            }

            if (details.requested.name == 'nimbus-jose-jwt') {
                useVersion '9.24.4'
            }

            // Fix GHSA-jgvc-jfgh-rjvv
            if (details.requested.name == 'jose4j') {
                useVersion '0.9.3'
            }

            // Fix CVE-2022-45688
            if (details.requested.group == 'org.json') {
                useVersion '20230227'
            }

            // Fix CVE-2022-36033
            if (details.requested.group == 'org.jsoup') {
                useVersion '1.15.4'
            }


        }
    }
}

dependencies {
    bootRunConfig "org.apereo.cas:cas-server-core:${project.'cas.version'}"
    bootRunConfig "org.apereo.cas:cas-server-core-logging:${project.'cas.version'}"
    bootRunConfig "org.apereo.cas:cas-server-core-web:${project.'cas.version'}"
    bootRunConfig "org.apereo.cas:cas-server-core-webflow:${project.'cas.version'}"
    bootRunConfig "org.apereo.cas:cas-server-core-cookie:${project.'cas.version'}"
    bootRunConfig "org.apereo.cas:cas-server-core-logout:${project.'cas.version'}"
    bootRunConfig "org.apereo.cas:cas-server-core-authentication:${project.'cas.version'}"
    bootRunConfig "org.apereo.cas:cas-server-core-validation:${project.'cas.version'}"
    bootRunConfig "org.apereo.cas:cas-server-core-audit:${project.'cas.version'}"
    bootRunConfig "org.apereo.cas:cas-server-core-tickets:${project.'cas.version'}"
    bootRunConfig "org.apereo.cas:cas-server-core-services:${project.'cas.version'}"
    bootRunConfig "org.apereo.cas:cas-server-core-util:${project.'cas.version'}"

    bootRunConfig "org.apereo.cas:cas-server-support-thymeleaf:${project.'cas.version'}"
    bootRunConfig "org.apereo.cas:cas-server-support-validation:${project.'cas.version'}"
    bootRunConfig "org.apereo.cas:cas-server-support-person-directory:${project.'cas.version'}"

    bootRunConfig "org.apereo.cas:cas-server-webapp-resources:${project.'cas.version'}"
    bootRunConfig "org.apereo.cas:cas-server-webapp-config:${project.'cas.version'}"
    bootRunConfig "org.apereo.cas:cas-server-webapp-init:${project.'cas.version'}"
    bootRunConfig "org.apereo.cas:cas-server-webapp-tomcat:${project.'cas.version'}"
    bootRunConfig "org.apereo.cas:cas-server-webapp-init-tomcat:${project.'cas.version'}"

    bootRunConfig "org.springframework.boot:spring-boot-devtools:${project.springBootVersion}"
}

sourceSets {
    bootRunSources {
        resources {
            srcDirs new File("//etc/cas/templates/"),
                    new File("${project.getProjectDir()}/src/main/resources/")
        }
    }
}

bootRun {
    classpath = configurations.bootRunConfig + sourceSets.main.compileClasspath + sourceSets.main.runtimeClasspath
    doFirst {
        sourceResources sourceSets.bootRunSources
        systemProperties = System.properties
    }

    def list = []
    list.add("-XX:TieredStopAtLevel=1")
    list.add("-Xverify:none")
    list.add("--add-modules")
    list.add("java.se")
    list.add("--add-exports")
    list.add("java.base/jdk.internal.ref=ALL-UNNAMED")
    list.add("--add-opens")
    list.add("java.base/java.lang=ALL-UNNAMED")
    list.add("--add-opens")
    list.add("java.base/java.nio=ALL-UNNAMED")
    list.add("--add-opens")
    list.add("java.base/sun.nio.ch=ALL-UNNAMED")
    list.add("--add-opens")
    list.add("java.management/sun.management=ALL-UNNAMED")
    list.add("--add-opens")
    list.add("jdk.management/com.sun.management.internal=ALL-UNNAMED")

    list.add("-XX:+UnlockExperimentalVMOptions")
    list.add("-XX:+EnableJVMCI")
    list.add("-XX:+UseJVMCICompiler")

    list.add("-Xrunjdwp:transport=dt_socket,address=5000,server=y,suspend=n")

    jvmArgs = list

    def appArgList = []
    args = appArgList
}

springBoot {
    buildInfo()
    mainClass = "org.apereo.cas.web.CasWebApplication"
}

bootBuildImage {
    imageName = "apereo/cas:${project.'cas.version'}"
}

bootWar {
    def executable = project.hasProperty("executable") && Boolean.valueOf(project.getProperty("executable"))
    if (executable) {
        logger.info "Including launch script for executable WAR artifact"
        launchScript()
    } else {
        logger.info "WAR artifact is not marked as an executable"
    }
    archiveName "cas.war"
    baseName "cas"

    entryCompression = ZipEntryCompression.STORED

    overlays {
        /*
            https://docs.freefair.io/gradle-plugins/current/reference/#_io_freefair_war_overlay
            Note: The "excludes" property is only for files in the war dependency.
            If a jar is excluded from the war, it could be brought back into the final war as a dependency
            of non-war dependencies. Those should be excluded via normal gradle dependency exclusions.
        */
        cas {
            from "org.apereo.cas:cas-server-webapp${project.appServer}:${project.'cas.version'}@war"
            provided = false
            excludes = [
                    "WEB-INF/lib/servlet-api-2*.jar",
                    "WEB-INF/lib/spring-boot*-2.6.3.jar", // upgraded
                    "WEB-INF/lib/spring-cloud-*-3.1.0.jar", // upgraded
                    "WEB-INF/lib/spring-*-5.3.19.jar", // upgraded
                    "WEB-INF/lib/snakeyaml-1.30.jar", // upgraded
                    "WEB-INF/lib/commons-text-1.9.jar", // upgraded
                    "WEB-INF/lib/netty-*-4.1.74.Final.jar", // upgraded
                    "WEB-INF/lib/jackson-*-2.13.1.jar", // upgraded
                    "WEB-INF/lib/woodstox-core-6.2.7.jar", // upgraded
                    "WEB-INF/lib/tomcat-*-9.0.65.jar", // as we use an external tomcat server we can remove the embedded on
                    "WEB-INF/lib/json-smart-2.4.7.jar", // upgraded
                    "WEB-INF/lib/accessors-smart-2.4.7.jar", // upgraded
                    "WEB-INF/lib/nimbus-jose-jwt-9.19.jar", // upgraded
                    "WEB-INF/lib/jose4j-0.7.9.jar", // upgraded
                    "WEB-INF/lib/json-20160810.jar", // upgraded
                    "WEB-INF/lib/jsoup-1.14.3.jar", // upgraded
            ]
        }
    }
}
